{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/modules/font-size/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Importing necessary modules from 'lit' and 'lit/decorators.js'\nimport { html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { FontSizeSettings } from \"./types\";\nimport { generateDynamicCSS } from \"src/utils\";\nimport { saveSelectionsLocally, getSavedSelections } from \"src/local-storage\";\n\n// Represents a module for managing font sizes in the application\nclass FontSizeModule extends LitElement {\n  // Declaring properties with decorators\n  @property({ type: Object })\n  settings!: FontSizeSettings; // Property to store settings object of type FontSizeSettings\n\n  @property({ type: String })\n  saveAs!: string; // Property to store the key for saving settings\n\n  @property({ type: String })\n  parentId!: string; // Property to store the parent ID\n\n  @property({ type: Object })\n  currentFontSize: string = \"Default\"; // Property to store the current font size with a default value\n\n  // Private properties\n  private availableFontSizes: string[]; // Private property to store available font sizes\n\n  private default: string = \"Default\"; // Private property to store the default font size\n\n  // Constructor to initialize properties\n  constructor() {\n    super(); // Call the constructor of the parent class\n    this.reset = this.reset.bind(this); // Bind the reset method to the current instance\n    this.availableFontSizes = []; // Initialize availableFontSizes as an empty array\n    this.addResetListener(); // Add the reset event listener\n  }\n  \n  // Called when the element is disconnected from the DOM\n  disconnectedCallback() {\n    super.disconnectedCallback(); // Call the disconnectedCallback of the parent class\n    window.removeEventListener(\"reset-settings\", this.reset); // Remove the reset event listener\n  }\n\n  // Override to disable shadow DOM\n  createRenderRoot() {\n    return this; // Disable shadow DOM\n  }\n\n  // Lifecycle method called when properties change\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has(\"settings\")) {\n      // If 'settings' property changed, update available font sizes and default value\n      generateDynamicCSS(this.settings as FontSizeSettings, \"font-size\"); // Generate dynamic CSS for font size\n      this.availableFontSizes = this.settings.options?.map((option) => option.label) ?? []; // Map the options to availableFontSizes\n      this.default = this.settings.default?.label ?? \"Default\"; // Set the default font size\n\n      // Check if the current font size is saved locally\n      const savedFontSize = getSavedSelections(this.saveAs, \"fontSize\");\n      this.currentFontSize = savedFontSize ?? this.default; // Set the current font size to saved value or default\n      this.updateFontSizeSetting(this.currentFontSize, false); // Update the font size settings without saving\n    }\n  }\n\n  // Add an event listener for resetting settings\n  addResetListener() {\n    window.addEventListener(\"reset-settings\", () => this.reset());\n  }\n\n  // Reset the current font size to the default value\n  reset() {\n    this.currentFontSize = this.default; // Reset the current font size to default\n    this.updateFontSizeSetting(this.default); // Update the font size settings to default\n  }\n\n  // Update the font size setting\n  updateFontSizeSetting(option: string, save: boolean = true) {\n    document.documentElement.setAttribute(\"data-a11y-font-size\", option); // Set the data-a11y-font-size attribute on the document element\n    if (save) saveSelectionsLocally(\"fontSize\", option, this.saveAs); // Save the selection locally if save is true\n  }\n\n  // Method to cycle through font size options\n  cycleFontSize = () => {\n    const currentIndex = this.availableFontSizes.indexOf(this.currentFontSize); // Get the current index of the font size\n    const nextIndex = (currentIndex + 1) % this.availableFontSizes.length; // Calculate the next index, cycling back to the start if at the end\n    const nextFontSize = this.availableFontSizes[nextIndex]; // Get the label of the next font size\n    this.currentFontSize = nextFontSize; // Update the current font size\n    this.updateFontSizeSetting(nextFontSize); // Call the update function to change the font size setting\n  };\n\n\n  // Render method for the component\n  render() {\n    return html`\n      <li role=\"none\">\n        <button\n          type=\"button\"\n          @click=\"${this.cycleFontSize}\"\n          style=\"flex-direction: column;\"\n          class=\"usa-button padding-y-105 gap-05 padding-x-05 usa-button--unstyled width-full ${this\n            .currentFontSize !== this.default\n            ? \"bg-a11y-active\"\n            : \"\"}\"\n        >\n          <svg\n            aria-hidden=\"true\"\n            role=\"img\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            style=\"--usa-button-icon-size:var(--usa-spacing-4)\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2.25\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M3 7v-2h13v2\" />\n            <path d=\"M10 5v14\" />\n            <path d=\"M12 19h-4\" />\n            <path d=\"M15 13v-1h6v1\" />\n            <path d=\"M18 12v7\" />\n            <path d=\"M17 19h2\" />\n          </svg>\n          ${this.settings.options?.find(\n            (option) => option.label === this.currentFontSize\n          )?.label ?? \"Text Size\"}\n        </button>\n      </li>\n    `;\n  }\n}\n\n// Define the custom element\ncustomElements.define(\"font-size-module\", FontSizeModule);\n\n// Function to render the font size module\nexport const fontSize = (settings: FontSizeSettings, saveAs: string, id: string) => html`\n  <font-size-module\n    .settings=\"${settings}\"\n    .saveAs=\"${saveAs}\"\n    .parentId=\"${id}\"\n  ></font-size-module>\n`;\n"]}