{"version":3,"file":"fontFamily.js","sourceRoot":"","sources":["../../../src/modules/fontFamily.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { GenericOption } from \"src/settings/types\";\nimport \"src/templates/a11y-bar-panel\";\nimport { A11yBarPanelElement } from \"src/templates/a11y-bar-panel\";\n\nexport interface FontFamilySettings {\n  options?: GenericOption[];\n  default?: GenericOption;\n  imports?: string[];\n}\n\nconst defaultFontFamilyOptions: GenericOption[] = [\n  {\n    label: \"Default\",\n    values: [],\n  },\n  {\n    label: \"Open Dyslexic\",\n    values: [\n      { \"--usa-font-sans\": '\"Open-Dyslexic\", sans-serif !important' },\n      { \"--usa-font-serif\": '\"Open-Dyslexic\", sans-serif !important' },\n      { \"--usa-font-alt\": '\"Open-Dyslexic\", sans-serif !important' },\n    ],\n  },\n  {\n    label: \"Atkinson Hyperlegible\",\n    values: [\n      { \"--usa-font-sans\": '\"Atkinson Hyperlegible\", sans-serif !important' },\n      { \"--usa-font-serif\": '\"Atkinson Hyperlegible\", sans-serif !important' },\n      { \"--usa-font-alt\": '\"Atkinson Hyperlegible\", sans-serif !important' },\n    ],\n  },\n  {\n    label: \"Roboto Mono\",\n    values: [\n      { \"--usa-font-sans\": '\"Roboto Mono\", monospace !important' },\n      { \"--usa-font-serif\": '\"Roboto Mono\", monospace !important' },\n      { \"--usa-font-alt\": '\"Roboto Mono\", monospace !important' },\n    ]\n  }\n];\n\nconst defaultFontFamilyImports: string[] = [\n  \"@import url('https://fonts.cdnfonts.com/css/open-dyslexic');\",\n  \"@import url('https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap');\",\n  \"@import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap');\",\n  \"@import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap');\"\n];\n\nexport const defaultFontFamilySettings: FontFamilySettings = {\n  options: defaultFontFamilyOptions,\n  default: defaultFontFamilyOptions[0],\n  imports: defaultFontFamilyImports,\n};\n\nclass FontFamilyModule extends LitElement {\n  @property({ type: Object })\n  settings!: FontFamilySettings;\n\n  @property({ type: String })\n  currentFontFamily: string = \"Default\";\n\n  @property({ type: Function })\n  updateFontFamilySetting!: (option: string) => void;\n\n  private availableFontFamilies: string[];\n\n  private default: string = \"Default\";\n\n  private panel!: A11yBarPanelElement;\n\n  constructor() {\n    super();\n    this.availableFontFamilies = [];\n  }\n\n  createRenderRoot() {\n    return this; // disables shadow DOM\n  }\n\n  firstUpdated() {\n    this.panel = document.createElement(\"a11y-bar-panel\") as A11yBarPanelElement;\n    this.panel.setAttribute(\"id\", \"a11y-bar-font-family-panel\");\n    document.body.appendChild(this.panel);\n  }\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.panel && this.panel.parentElement) {\n      this.panel.parentElement.removeChild(this.panel);\n    }\n  }\n\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has(\"settings\")) {\n      this.availableFontFamilies =\n        this.settings.options?.map((option) => option.label) ?? [];\n      this.default = this.settings.default?.label ?? \"Default\";\n      if (this.settings.imports) {\n        // If styles already applied, remove them\n        const existingStyles = document.getElementById(\n          `a11y-dynamic-styles-font-imports`\n        );\n        if (existingStyles) {\n          existingStyles.remove();\n        }\n        const styleElement = document.createElement(\"style\");\n        styleElement.id = `a11y-dynamic-styles-font-imports`;\n        \n        let cssText = \"\";\n        this.settings.imports.forEach((item) => {\n          cssText += item;\n        });\n        styleElement.textContent = cssText;\n        document.head.appendChild(styleElement);\n      }\n\n      this.updatePanelOptions();\n    }\n    if (changedProperties.has(\"currentFontFamily\")) {\n      this.requestUpdate();\n    }\n  }\n\n  \n  updatePanelOptions() {\n    if (this.panel) {\n      this.panel.options = this.settings.options!;\n      this.panel.currentSelection = this.currentFontFamily;\n      this.panel.label = \"Choose a Font Family\";\n      this.panel.updateSelection = this.updateFontFamilySetting;\n      this.panel.triggerId = \"a11y-font-family-trigger\";\n      this.panel.type = \"font-family\";\n    }\n  }\n\n\n  handleButtonClick = () => {\n    this.panel.open ? this.panel.hidePanel() : this.panel.showPanel();\n  };\n\n  render() {\n    return html`\n      <li role=\"none\">\n        <button\n          type=\"button\"\n          @click=\"${this.handleButtonClick}\"\n          style=\"flex-direction: column;\"\n          id=\"a11y-font-family-trigger\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          aria-controls=\"a11y-bar-font-family-panel\"\n          class=\"usa-button padding-y-105 gap-1 padding-x-05 usa-button--unstyled width-full ${this\n            .currentFontFamily !== this.default\n            ? \"bg-a11y-active\"\n            : \"\"}\"\n        >\n          <span class=\"text-bold font-xl\"> abc </span>\n          Font\n        </button>\n      </li>\n    `;\n  }\n}\n\ncustomElements.define(\"font-family-module\", FontFamilyModule);\n\nexport const fontFamily = (\n  settings: FontFamilySettings,\n  updateFontFamilySetting: (option: string) => void,\n  selection: string | null\n) => html`\n  <font-family-module\n    .settings=\"${settings}\"\n    .updateFontFamilySetting=\"${updateFontFamilySetting}\"\n    .currentFontFamily=\"${selection}\"\n  ></font-family-module>\n`;\n"]}