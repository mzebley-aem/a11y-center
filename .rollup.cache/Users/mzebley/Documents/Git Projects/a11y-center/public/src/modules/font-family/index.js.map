{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/modules/font-family/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement } from \"lit\"; // Import LitElement and html from the lit library\nimport { property } from \"lit/decorators.js\"; // Import the property decorator\nimport \"src/templates/a11y-bar-panel\"; // Import custom element a11y-bar-panel\nimport { A11yBarPanelElement } from \"src/templates/a11y-bar-panel\"; // Import the type for a11y-bar-panel\nimport { FontFamilySettings } from \"./types\"; // Import the type for FontFamilySettings\nimport { generateDynamicCSS } from \"src/utils\"; // Import the generateDynamicCSS function\nimport { saveSelectionsLocally, getSavedSelections } from \"src/local-storage\"; // Import functions for saving and retrieving selections from local storage\n\nclass FontFamilyModule extends LitElement {\n  @property({ type: Object })\n  settings!: FontFamilySettings; // Property to store settings object of type FontFamilySettings\n\n  @property({ type: String })\n  saveAs!: string; // Property to store the key for saving settings\n\n  @property({ type: String })\n  parentId!: string; // Property to store the parent ID\n\n  @property({ type: String })\n  currentFontFamily: string = \"Default\"; // Property to store the current font family with a default value\n\n  private availableFontFamilies: string[]; // Private property to store available font families\n\n  private default: string = \"Default\"; // Private property to store the default font family\n\n  private panel!: A11yBarPanelElement; // Private property to store the reference to the a11y-bar-panel element\n\n  constructor() {\n    super(); // Call the constructor of the parent class\n    this.availableFontFamilies = []; // Initialize availableFontFamilies as an empty array\n    this.reset = this.reset.bind(this); // Bind the reset method to the current instance\n    this.addResetListener(); // Add the reset event listener\n  }\n\n  createRenderRoot() {\n    return this; // Disable shadow DOM\n  }\n\n  addResetListener() {\n    window.addEventListener(\"reset-settings\", () => this.reset()); // Add an event listener to call the reset method when reset-settings event is triggered\n  }\n\n  reset() {\n    this.currentFontFamily = this.default; // Reset the current font family to default\n    this.updateFontFamilySettings(this.default); // Update the font family settings to default\n\n    // Ensure the panel's current selection is updated\n    if (this.panel) {\n      this.panel.currentSelection = this.currentFontFamily; \n    }\n  }\n\n  // Arrow function so that 'this' refers to the proper context after being called from the panel\n  updateFontFamilySettings = (option: string, save: boolean = true) => {\n    // Update the font family setting\n    document.documentElement.setAttribute(\"data-a11y-font-family\", option); // Set the data-a11y-font-family attribute on the document element\n    this.currentFontFamily = option; // Update the current font family\n    if (this.panel) this.panel.currentSelection = this.currentFontFamily; // Update the current selection in the panel\n    // Save the font family locally if save is true\n    if (save) saveSelectionsLocally(\"fontFamily\", option, this.saveAs); // Save the selection locally\n  };\n\n  firstUpdated() {\n    // Called when the element is first updated\n    this.panel = document.createElement(\n      \"a11y-bar-panel\"\n    ) as A11yBarPanelElement; // Create the a11y-bar-panel element\n    this.panel.setAttribute(\"id\", \"a11y-bar-font-family-panel\"); // Set the id attribute of the panel\n    document.body.appendChild(this.panel); // Append the panel to the document body\n  }\n\n  disconnectedCallback() {\n    // Called when the element is disconnected from the DOM\n    super.disconnectedCallback(); // Call the disconnectedCallback of the parent class\n    window.removeEventListener(\"reset-settings\", this.reset); // Remove the reset event listener\n    if (this.panel && this.panel.parentElement) {\n      this.panel.parentElement.removeChild(this.panel); // Remove the panel from the DOM if it exists\n    }\n  }\n\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    // Called when properties are updated\n    if (changedProperties.has(\"settings\")) {\n      // Check if settings property has changed\n      generateDynamicCSS(this.settings as FontFamilySettings, \"font-family\"); // Generate dynamic CSS for font family\n\n      this.availableFontFamilies =\n        this.settings.options?.map((option) => option.label) ?? []; // Map the options to availableFontFamilies\n      this.default = this.settings.default?.label ?? \"Default\"; // Set the default font family\n\n      // Check if the current font family is saved locally\n      const savedFontFamily = getSavedSelections(this.saveAs, \"fontFamily\");\n      this.currentFontFamily = savedFontFamily ?? this.default; // Set the current font family to saved value or default\n      this.updateFontFamilySettings(this.currentFontFamily, false); // Update the font family settings without saving\n\n      if (this.settings.imports) {\n        // If there are font imports in settings\n        // If styles already applied, remove them\n        const existingStyles = document.getElementById(\n          `a11y-dynamic-styles-font-imports`\n        );\n        if (existingStyles) {\n          existingStyles.remove(); // Remove existing styles if they exist\n        }\n        const styleElement = document.createElement(\"style\"); // Create a new style element\n        styleElement.id = `a11y-dynamic-styles-font-imports`; // Set the id for the style element\n\n        let cssText = \"\";\n        this.settings.imports.forEach((item) => {\n          cssText += item; // Concatenate all the CSS imports\n        });\n        styleElement.textContent = cssText; // Set the text content of the style element to the concatenated CSS\n        document.head.appendChild(styleElement); // Append the style element to the document head\n      }\n\n      this.updatePanelOptions(); // Update the options in the panel\n    }\n  }\n\n  updatePanelOptions() {\n    // Update the options in the panel\n    if (this.panel) {\n      this.panel.options = this.settings.options!; // Set the options of the panel\n      this.panel.label = \"Select a font family\"; // Set the label of the panel\n      this.panel.action = this.updateFontFamilySettings; // Set the action for the panel\n      this.panel.currentSelection = this.currentFontFamily; // Set the current selection in the panel\n      this.panel.triggerId = \"a11y-font-family-trigger\"; // Set the trigger ID for the panel\n      this.panel.parentId = this.parentId; // Set the parent ID for the panel\n      this.panel.type = \"font-family\"; // Set the type of the panel\n    }\n  }\n\n  handleButtonClick = () => {\n    // Handle the button click event\n    this.panel.open ? this.panel.hidePanel() : this.panel.showPanel(this.currentFontFamily); // Toggle the panel visibility\n  };\n\n  render() {\n    return html`\n      <li role=\"none\">\n        <button\n          type=\"button\"\n          @click=\"${this.handleButtonClick}\"\n          style=\"flex-direction: column;\"\n          id=\"a11y-font-family-trigger\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          aria-controls=\"a11y-bar-font-family-panel\"\n          class=\"usa-button padding-y-105 gap-1 padding-x-05 usa-button--unstyled width-full ${this\n            .currentFontFamily !== this.default\n            ? \"bg-a11y-active\"\n            : \"\"}\"\n        >\n          <span class=\"text-bold font-lg\"> abc </span>\n          Font\n        </button>\n      </li>\n    `;\n  }\n}\n\ncustomElements.define(\"font-family-module\", FontFamilyModule);\n\nexport const fontFamily = (\n  settings: FontFamilySettings,\n  saveAs: string,\n  id: string\n) => html`\n  <font-family-module\n    .settings=\"${settings}\"\n    .saveAs=\"${saveAs}\"\n    .parentId=\"${id}\"\n  ></font-family-module>\n`;\n"]}