{"version":3,"file":"fontSize.js","sourceRoot":"","sources":["../../../../src/modules/font-size/fontSize.ts"],"names":[],"mappings":"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","sourcesContent":["// Importing necessary modules from 'lit' and 'lit/decorators.js'\nimport { html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { FontSizeSettings } from \"./types\";\nimport { generateDynamicCSS } from \"src/utils\";\nimport { saveSelectionsLocally, getSavedSelections } from \"src/local-storage\";\n\n/**\n * Represents a module for managing font sizes in the application.\n */\nclass FontSizeModule extends LitElement {\n  // Declaring properties with decorators\n  @property({ type: Object })\n  settings!: FontSizeSettings;\n\n  @property({ type: Object })\n  saveAs!: string;\n\n  @property({ type: Object })\n  currentFontSize: string = \"Default\";\n\n  // Private properties\n  private availableFontSizes: string[];\n\n  private default: string = \"Default\";\n\n  // Constructor to initialize properties\n  constructor() {\n    super();\n    this.reset = this.reset.bind(this);\n    this.availableFontSizes = [];\n    this.addResetListener();\n  }\n  \n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"reset-settings\", this.reset);\n  }\n\n  // Override to disable shadow DOM\n  createRenderRoot() {\n    return this;\n  }\n\n  // Lifecycle method called when properties change\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has(\"settings\")) {\n      generateDynamicCSS(this.settings as FontSizeSettings, \"font-size\");\n      // If 'settings' property changed, update available font sizes and default value\n      this.availableFontSizes =\n        this.settings.options?.map((option) => option.label) ?? [];\n      this.default = this.settings.default?.label ?? \"Default\";\n\n      // Check if the current font size is saved locally\n      const savedFontSize = getSavedSelections(this.saveAs, \"fontSize\");\n      this.currentFontSize = savedFontSize ?? this.default;\n      this.updateFontSizeSetting(this.currentFontSize, false);\n    }\n  }\n\n  addResetListener() {\n    window.addEventListener(\"reset-settings\", () => this.reset());\n  }\n\n  reset() {\n    this.currentFontSize = this.default;\n    this.updateFontSizeSetting(this.default);\n  }\n\n  updateFontSizeSetting(option: string, save: boolean = true) {\n    // Update the font size setting\n    document.documentElement.setAttribute(\"data-a11y-font-size\", option);\n    // Save the font size locally\n    if (save) saveSelectionsLocally(\"fontSize\", option, this.saveAs);\n  }\n\n  // Method to cycle through font size options\n  cycleFontSize = () => {\n    // Get the current index of the font size\n    const currentIndex = this.availableFontSizes.indexOf(this.currentFontSize);\n    // Calculate the next index, cycling back to the start if at the end\n    const nextIndex = (currentIndex + 1) % this.availableFontSizes.length;\n    // Get the label of the next font size\n    const nextFontSize = this.availableFontSizes[nextIndex];\n    // Update the current font size\n    this.currentFontSize = nextFontSize;\n    // Call the update function passed in to change the font size setting\n    this.updateFontSizeSetting(nextFontSize);\n  };\n\n  // Render method for the component\n  render() {\n    return html`\n      <li role=\"none\">\n        <button\n          type=\"button\"\n          @click=\"${this.cycleFontSize}\"\n          style=\"flex-direction: column;\"\n          class=\"usa-button padding-y-105 gap-05 padding-x-05 usa-button--unstyled width-full ${this\n            .currentFontSize !== this.default\n            ? \"bg-a11y-active\"\n            : \"\"}\"\n        >\n          <svg\n            aria-hidden=\"true\"\n            role=\"img\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            style=\"--usa-button-icon-size:var(--usa-spacing-4)\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2.25\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M3 7v-2h13v2\" />\n            <path d=\"M10 5v14\" />\n            <path d=\"M12 19h-4\" />\n            <path d=\"M15 13v-1h6v1\" />\n            <path d=\"M18 12v7\" />\n            <path d=\"M17 19h2\" />\n          </svg>\n          ${this.settings.options?.find(\n            (option) => option.label === this.currentFontSize\n          )?.label ?? \"Text Size\"}\n        </button>\n      </li>\n    `;\n  }\n}\n\n// Define the custom element\ncustomElements.define(\"font-size-module\", FontSizeModule);\n\n// Function to render the font size module\nexport const fontSize = (settings: FontSizeSettings, saveAs: string) => html`\n  <font-size-module\n    .settings=\"${settings}\"\n    .saveAs=\"${saveAs}\"\n  ></font-size-module>\n`;\n"]}