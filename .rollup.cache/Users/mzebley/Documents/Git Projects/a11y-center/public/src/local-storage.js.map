{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../src/local-storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D,sDAAsD;AACtD,SAAS,4BAA4B;IACjC,MAAM,eAAe,qBAAsB,mBAAmB,CAAE,CAAC;IACjE,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QAChC,IAAI,eAAe,CAAC,GAAG,CAAC,IAAI,OAAO,eAAe,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,SAAS,IAAK,eAAe,CAAC,GAAG,CAAS,EAAE,CAAC;YACjH,eAAe,CAAC,GAAG,CAAC,GAAI,eAAe,CAAC,GAAG,CAAoC,CAAC,OAAO,CAAC,KAAK,CAAC;QAClG,CAAC;IACL,CAAC;IACD,OAAO,eAAe,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,GAAW,EAAE,QAAa,EAAE,SAAiB,wBAAwB;IACvG,IAAI,CAAC;QACD,6CAA6C;QAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,KAAK,CAAC;QACV,IAAI,WAAW,EAAE,CAAC;YACd,IAAI,CAAC;gBACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACpC,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBAClB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,UAAU,CAAC,CAAC;gBAC3D,KAAK,GAAG,4BAA4B,EAAE,CAAC,CAAC,sDAAsD;YAClG,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,KAAK,GAAG,4BAA4B,EAAE,CAAC,CAAC,sDAAsD;QAClG,CAAC;QAED,6BAA6B;QAC7B,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;QAEtB,kDAAkD;QAClD,IAAI,CAAC;YACD,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,YAAY,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;AACL,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAiB,wBAAwB,EAAE,GAAY;IACtF,IAAI,CAAC;QACD,wDAAwD;QACxD,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEjD,oCAAoC;QACpC,IAAI,WAAW,EAAE,CAAC;YACd,gCAAgC;YAChC,IAAI,GAAG,EAAE,CAAC;gBACN,+CAA+C;gBAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAEtC,uDAAuD;gBACvD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;oBACd,OAAO,IAAI,CAAC,CAAC,uCAAuC;gBACxD,CAAC;gBAED,uCAAuC;gBACvC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC;YAED,oEAAoE;YACpE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,uCAAuC;QACvC,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;AACL,CAAC","sourcesContent":["import { defaultA11ySettings } from \"src/settings/defaults\";\nimport { A11ySettings } from \"src/settings/types\";\n\n// Helper function to get default settings with labels\nfunction getDefaultSettingsWithLabels(): A11ySettings {\n    const defaultSettings: A11ySettings = { ...defaultA11ySettings };\n    for (const key in defaultSettings) {\n        if (defaultSettings[key] && typeof defaultSettings[key] === 'object' && 'default' in (defaultSettings[key] as any)) {\n            defaultSettings[key] = (defaultSettings[key] as { default: { label: string } }).default.label;\n        }\n    }\n    return defaultSettings;\n}\n\nexport function saveSelectionsLocally(key: string, variable: any, saveAs: string = \"a11y-center-selections\") {\n    try {\n        // Retrieve existing settings or use defaults\n        const savedString = localStorage.getItem(saveAs);\n        let saved;\n        if (savedString) {\n            try {\n                saved = JSON.parse(savedString);\n            } catch (parseError) {\n                console.error('Error parsing saved settings:', parseError);\n                saved = getDefaultSettingsWithLabels(); // Create a fresh copy of default settings with labels\n            }\n        } else {\n            saved = getDefaultSettingsWithLabels(); // Create a fresh copy of default settings with labels\n        }\n\n        // Update the settings object\n        saved[key] = variable;\n\n        // Save the updated settings back to local storage\n        try {\n            localStorage.setItem(saveAs, JSON.stringify(saved));\n        } catch (storageError) {\n            console.error('Error saving to localStorage:', storageError);\n        }\n    } catch (error) {\n        console.error('Unexpected error in saveSelectionsLocally:', error);\n    }\n}\n\nexport function getSavedSelections(saveAs: string = \"a11y-center-selections\", key?: string) {\n    try {\n        // Retrieve the saved settings string from local storage\n        const savedString = localStorage.getItem(saveAs);\n        \n        // Check if the saved settings exist\n        if (savedString) {\n            // If a specific key is provided\n            if (key) {\n                // Parse the saved settings string to an object\n                const saved = JSON.parse(savedString);\n                \n                // Check if the specific key exists in the saved object\n                if (!saved[key]) {\n                    return null; // Return null if the key doesn't exist\n                }\n                \n                // Return the value of the specific key\n                return saved[key];\n            }\n            \n            // If no specific key is provided, return the entire settings object\n            return JSON.parse(savedString);\n        }\n    } catch (error) {\n        // Log any unexpected errors that occur\n        console.error('Unexpected error in getSavedSelections:', error);\n    }\n}\n"]}