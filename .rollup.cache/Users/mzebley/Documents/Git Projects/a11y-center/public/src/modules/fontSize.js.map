{"version":3,"file":"fontSize.js","sourceRoot":"","sources":["../../../src/modules/fontSize.ts"],"names":[],"mappings":"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","sourcesContent":["// Importing necessary modules from 'lit' and 'lit/decorators.js'\nimport { html, LitElement } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { GenericOption } from \"../settings/types\";\n\n// Interface defining the structure for font size settings\nexport interface FontSizeSettings {\n  options?: GenericOption[];\n  default?: GenericOption;\n}\n\n// Default font size options\nconst defaultFontSizeOptions: GenericOption[] = [\n  {\n    label: \"Default\",\n    values: [\n      { \"--a11y-font-size-modifier\": 1 },\n      { \"--a11y-line-height-modifier\": 1 },\n      { \"--a11y-spacing-modifier\": 1 },\n      { \"--a11y-letter-spacing-modifier\": 1 },\n    ],\n  },\n  {\n    label: \"Large\",\n    values: [\n      { \"--a11y-font-size-modifier\": 1.25 },\n      { \"--a11y-line-height-modifier\": 1.125 },\n      { \"--a11y-spacing-modifier\": 1.15 },\n      { \"--a11y-letter-spacing-modifier\": 1.125 },\n    ],\n  },\n  {\n    label: \"Larger\",\n    values: [\n      { \"--a11y-font-size-modifier\": 1.5 },\n      { \"--a11y-line-height-modifier\": 1.125 },\n      { \"--a11y-spacing-modifier\": 1.25 },\n      { \"--a11y-letter-spacing-modifier\": 1.325 },\n    ],\n    additionalCSS: `.accessibility-layout,\n    .accessibility-layout.display-flex.flex-row {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: flex-start;\n        align-content: flex-start;\n    }\n\n    .accessibility-margin-left-0 {\n        margin-left: 0;\n    }\n\n    .accessibility-layout>*,\n    .accessibility-layout.display-flex.flex-row>* {\n        flex: 1;\n        flex-basis: 100%;\n        width: 100%;\n    }\n\n    @media (min-width: 40em) {\n        .usa-graphic-list .usa-graphic-list__row:last-child .usa-media-block {\n            margin-bottom: var(--usa-spacing-8);\n        }\n    }`,\n  },\n];\n\n// Default font size settings object\nexport const defaultFontSizeSettings: FontSizeSettings = {\n  options: defaultFontSizeOptions,\n  default: defaultFontSizeOptions[0],\n};\n\n/**\n * Represents a module for managing font sizes in the application.\n */\nclass FontSizeModule extends LitElement {\n  // Declaring properties with decorators\n  @property({ type: Object })\n  settings!: FontSizeSettings;\n\n  @property({ type: String })\n  currentFontSize: string = \"Default\";\n\n  @property({ type: Function })\n  updateFontSizeSetting!: (option: string) => void;\n\n  // Private properties\n  private availableFontSizes: string[];\n\n  private default: string = \"Default\";\n\n  // Constructor to initialize properties\n  constructor() {\n    super();\n    this.availableFontSizes = [];\n  }\n\n  // Override to disable shadow DOM\n  createRenderRoot() {\n    return this;\n  }\n\n  // Lifecycle method called when properties change\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has(\"settings\")) {\n      // If 'settings' property changed, update available font sizes and default value\n      this.availableFontSizes =\n        this.settings.options?.map((option) => option.label) ?? [];\n      this.default = this.settings.default?.label ?? \"Default\";\n    }\n    if (changedProperties.has(\"currentFontSize\")) {\n      // If 'currentFontSize' property changed, request update to re-render\n      this.requestUpdate();\n    }\n  }\n\n  // Method to cycle through font size options\n  cycleFontSize = () => {\n    // Get the current index of the font size\n    const currentIndex = this.availableFontSizes.indexOf(this.currentFontSize);\n    // Calculate the next index, cycling back to the start if at the end\n    const nextIndex = (currentIndex + 1) % this.availableFontSizes.length;\n    // Get the label of the next font size\n    const nextFontSize = this.availableFontSizes[nextIndex];\n    // Update the current font size\n    this.currentFontSize = nextFontSize;\n    // Call the update function passed in to change the font size setting\n    this.updateFontSizeSetting(nextFontSize);\n  };\n\n  // Render method for the component\n  render() {\n    return html`\n      <li role=\"none\">\n        <button\n          type=\"button\"\n          @click=\"${this.cycleFontSize}\"\n          style=\"flex-direction: column;\"\n          class=\"usa-button padding-y-105 gap-05 padding-x-05 usa-button--unstyled width-full ${this\n            .currentFontSize !== this.default\n            ? \"bg-a11y-active\"\n            : \"\"}\"\n        >\n          <svg\n            aria-hidden=\"true\"\n            role=\"img\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            style=\"--usa-button-icon-size:var(--usa-spacing-4)\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2.25\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          >\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M3 7v-2h13v2\" />\n            <path d=\"M10 5v14\" />\n            <path d=\"M12 19h-4\" />\n            <path d=\"M15 13v-1h6v1\" />\n            <path d=\"M18 12v7\" />\n            <path d=\"M17 19h2\" />\n          </svg>\n          ${this.settings.options?.find(\n            (option) => option.label === this.currentFontSize\n          )?.label ?? \"Text Size\"}\n        </button>\n      </li>\n    `;\n  }\n}\n\n// Define the custom element\ncustomElements.define(\"font-size-module\", FontSizeModule);\n\n// Function to render the font size module\nexport const fontSize = (\n  settings: FontSizeSettings,\n  updateFontSizeSetting: (option: string) => void,\n  selection: string | null\n) => html`\n  <font-size-module\n    .settings=\"${settings}\"\n    .updateFontSizeSetting=\"${updateFontSizeSetting}\"\n    .currentFontSize=\"${selection}\"\n  ></font-size-module>\n`;\n"]}